/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package todolist;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.sql.*;
import java.util.*;

public class Main extends javax.swing.JFrame {
    private JPanel taskPanel;
    private HashMap<JPanel, JTextArea> taskNotes = new HashMap<>();
    private HashMap<JPanel, Integer> taskIdMapping = new HashMap<>();

    public Main() {
        initComponents();
        taskPanel = new JPanel();
        taskPanel.setLayout(new BoxLayout(taskPanel, BoxLayout.Y_AXIS));
        taskScrollPane.setViewportView(taskPanel);
        loadTasksFromDatabase();
        
        // Icons aplikasi
        java.net.URL iconURL = getClass().getResource("/images/Check.png");
        if (iconURL == null) {
            System.out.println("Ikon tidak ditemukan. Periksa jalur file!");
        } else {
            this.setIconImage(new ImageIcon(iconURL).getImage());
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        todolistLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        taskScrollPane = new javax.swing.JScrollPane();
        todolistLabel = new javax.swing.JLabel();
        deleteAllBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        addTaskBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titlePanel.setBackground(new java.awt.Color(235, 241, 253));
        titlePanel.setForeground(new java.awt.Color(255, 255, 255));
        titlePanel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(14, 58, 123));

        todolistLabel1.setBackground(new java.awt.Color(255, 255, 255));
        todolistLabel1.setFont(new java.awt.Font("Sirukota", 1, 48)); // NOI18N
        todolistLabel1.setForeground(new java.awt.Color(255, 255, 255));
        todolistLabel1.setText("TO DO LIST");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(todolistLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(todolistLabel1)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(235, 241, 253));

        todolistLabel.setBackground(new java.awt.Color(255, 255, 255));
        todolistLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 36)); // NOI18N
        todolistLabel.setForeground(new java.awt.Color(255, 255, 255));
        todolistLabel.setRequestFocusEnabled(false);
        taskScrollPane.setViewportView(todolistLabel);

        deleteAllBtn.setFont(new java.awt.Font("ZT Talk", 0, 14)); // NOI18N
        deleteAllBtn.setForeground(new java.awt.Color(11, 25, 87));
        deleteAllBtn.setText("Delete All");
        deleteAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllBtnActionPerformed(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("ZT Talk", 0, 14)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(11, 25, 87));
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        addTaskBtn.setBackground(new java.awt.Color(11, 25, 87));
        addTaskBtn.setFont(new java.awt.Font("ZT Talk", 0, 14)); // NOI18N
        addTaskBtn.setForeground(new java.awt.Color(255, 255, 255));
        addTaskBtn.setText("Add Task");
        addTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaskBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taskScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(addTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteAllBtn)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(taskScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void addTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaskBtnActionPerformed
        // Menambah baris task baru
        JPanel taskItemPanel = new JPanel(); 
        taskItemPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));        
        taskItemPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        taskItemPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 50));
        
        JCheckBox taskCheckBox = new JCheckBox();
        taskItemPanel.add(taskCheckBox);

        JTextField taskField = new JTextField("");
        taskField.setEditable(true);
        taskField.setPreferredSize(new Dimension(200, 30));
        taskItemPanel.add(taskField);

        JButton showNoteButton = new JButton("Show Note");
        taskItemPanel.add(showNoteButton);

        Color customBackgroundColor = new Color(0x0E3A7B); 
        Color customTextColor = new Color(255, 255, 255);    

        showNoteButton.setBackground(customBackgroundColor); 
        showNoteButton.setForeground(customTextColor);      

        JTextArea noteArea = new JTextArea(10, 30); 
        noteArea.setLineWrap(true);
        noteArea.setWrapStyleWord(true);

        JScrollPane scrollNoteArea = new JScrollPane(noteArea);

        JDialog noteDialog = new JDialog();
        noteDialog.setTitle("Catatan");
        noteDialog.setSize(400, 300);
        noteDialog.setLocationRelativeTo(null);
        noteDialog.add(scrollNoteArea);

        taskNotes.put(taskItemPanel, noteArea);

        showNoteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                noteDialog.setVisible(true);
            }
        }); 

        JButton deleteButton = new JButton("Delete");
        deleteButton.setPreferredSize(new Dimension(80, 30));
        taskItemPanel.add(deleteButton);

        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JTextField taskField = (JTextField) taskItemPanel.getComponent(1);
                JCheckBox taskCheckBox = (JCheckBox) taskItemPanel.getComponent(0);
                JTextArea noteArea = taskNotes.get(taskItemPanel);

                String task = taskField.getText();
                String note = noteArea.getText();
                boolean isCompleted = taskCheckBox.isSelected();

                deleteTaskFromDatabase(task, note, isCompleted);

                taskNotes.remove(taskItemPanel); 
                taskPanel.remove(taskItemPanel);
                taskPanel.revalidate();
                taskPanel.repaint();
                
            }
        });

        taskPanel.add(taskItemPanel);
            
            taskCheckBox.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (taskCheckBox.isSelected()) {
                        taskField.setForeground(Color.GRAY);

                        taskPanel.remove(taskItemPanel); 
                        taskPanel.add(taskItemPanel);
                    } else {
                        taskField.setForeground(Color.BLACK);
                        
                        taskPanel.remove(taskItemPanel);
                        taskPanel.add(taskItemPanel, 0);
                    }

                    taskPanel.revalidate();
                    taskPanel.repaint();
                }
            });
        
        taskPanel.revalidate();
        taskPanel.repaint();
        
        try (Connection conn = Koneksi.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed!");
                return;
            }

            String sql = "INSERT INTO tasks (task, note, is_completed) VALUES (?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setString(1, "New Task");
                pstmt.setString(2, "");
                pstmt.setBoolean(3, false);
                pstmt.executeUpdate();

                ResultSet generatedKeys = pstmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int taskId = generatedKeys.getInt(1); // Mendapatkan ID task
                    taskItemPanel.putClientProperty("taskId", taskId); // Simpan ID di panel
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding task: " + ex.getMessage());
        }
    }//GEN-LAST:event_addTaskBtnActionPerformed
    
    private int getTaskID(JPanel taskItemPanel) {
        Object taskIdProperty = taskItemPanel.getClientProperty("taskId");
        if (taskIdProperty != null && taskIdProperty instanceof Integer) {
            return (int) taskIdProperty;
        }

        for (Map.Entry<JPanel, Integer> entry : taskIdMapping.entrySet()) {
            if (entry.getKey().equals(taskItemPanel)) {
                return entry.getValue();
            }
        }
        return -1;
    }

    
    private void deleteAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllBtnActionPerformed

        int confirmation = JOptionPane.showConfirmDialog(
            this, 
            "Yakin ingin menghaus semua tugas?", 
            "Delete All Confirmation", 
            JOptionPane.YES_NO_OPTION
        );

        if (confirmation == JOptionPane.YES_OPTION) {
            try (Connection conn = Koneksi.getConnection()) {
                if (conn == null) {
                    JOptionPane.showMessageDialog(this, "Failed to connect to database!");
                    return;
                }

                String sql = "DELETE FROM tasks";
                Statement stmt = conn.createStatement();
                stmt.executeUpdate(sql);

                taskNotes.clear();
                taskPanel.removeAll();
                taskPanel.revalidate();
                taskPanel.repaint();

                JOptionPane.showMessageDialog(this, "Semua tugas berhasil terhapus!");
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting all tasks: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_deleteAllBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        try (Connection conn = Koneksi.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(null, "Database connection failed!");
                return;
            }
        String updateQuery = "UPDATE tasks SET task = ?, note = ?, is_completed = ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {
            for (Component component : taskPanel.getComponents()) {
                if (component instanceof JPanel) {
                    JPanel taskItemPanel = (JPanel) component;
                    JTextField taskField = (JTextField) taskItemPanel.getComponent(1); // Indeks 1 = JTextField
                    JCheckBox taskCheckBox = (JCheckBox) taskItemPanel.getComponent(0); // Indeks 0 = JCheckBox
                    JTextArea noteArea = taskNotes.get(taskItemPanel); // Ambil JTextArea dari mapping
                    if (taskField == null || taskCheckBox == null || noteArea == null) {
                        JOptionPane.showMessageDialog(null, "Task component missing. Skipping this task.");
                        continue;
                    }
                    
                    String updatedTask = taskField.getText();
                    String updatedNote = noteArea.getText();
                    boolean isCompleted = taskCheckBox.isSelected();
                    int taskId = getTaskID(taskItemPanel);

                    if (taskId == -1) {
                        JOptionPane.showMessageDialog(null, "Task ID not found for some tasks. Skipping.");
                        continue;
                    }

                    pstmt.setString(1, updatedTask);
                    pstmt.setString(2, updatedNote);
                    pstmt.setBoolean(3, isCompleted);
                    pstmt.setInt(4, taskId);

                    pstmt.addBatch();
                }
            }

            int[] result = pstmt.executeBatch();
            JOptionPane.showMessageDialog(null, "Semua tugas berhasil diperbarui! (" 
                    + result.length + " tugas)");

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating tasks: " + ex.getMessage());
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Database connection error: " + ex.getMessage());
    }
    }//GEN-LAST:event_saveBtnActionPerformed
    
    private void loadTasksFromDatabase() {
        try (Connection conn = Koneksi.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Failed to connect to database!");
                return;
            }

        taskNotes.clear();
        taskPanel.removeAll();

        String sql = "SELECT id, task, note, is_completed FROM tasks";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);

        while (rs.next()) {
            int id = rs.getInt("id");
            String task = rs.getString("task");
            String note = rs.getString("note");
            boolean isCompleted = rs.getBoolean("is_completed");

            // Panel untuk setiap task
            JPanel taskItemPanel = new JPanel();
            taskItemPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            taskItemPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
            taskItemPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 50));
            taskItemPanel.putClientProperty("taskId", id);

            JCheckBox taskCheckBox = new JCheckBox();
            taskCheckBox.setSelected(isCompleted);
            taskItemPanel.add(taskCheckBox);

            JTextField taskField = new JTextField(task);
            taskField.setEditable(true);
            taskField.setPreferredSize(new Dimension(200, 30));
            taskItemPanel.add(taskField);

            taskField.setForeground(isCompleted ? Color.GRAY : Color.BLACK);

            JButton showNoteButton = new JButton("Show Note");
            taskItemPanel.add(showNoteButton);

            Color customBackgroundColor = new Color(0x0E3A7B);
            Color customTextColor = new Color(255, 255, 255);
            showNoteButton.setBackground(customBackgroundColor);
            showNoteButton.setForeground(customTextColor);

            JTextArea noteArea = new JTextArea(10, 30);
            noteArea.setLineWrap(true);
            noteArea.setWrapStyleWord(true);
            noteArea.setText(note);

            JScrollPane scrollNoteArea = new JScrollPane(noteArea);

            JDialog noteDialog = new JDialog();
            noteDialog.setTitle("Catatan");
            noteDialog.setSize(400, 300);
            noteDialog.setLocationRelativeTo(null);
            noteDialog.add(scrollNoteArea);

            taskNotes.put(taskItemPanel, noteArea);

            showNoteButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    noteDialog.setVisible(true);
                }
            });

            JButton deleteButton = new JButton("Delete");
            deleteButton.setPreferredSize(new Dimension(80, 30));
            taskItemPanel.add(deleteButton);

            deleteButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // Hapus task dari database
                    deleteTaskFromDatabase(taskField.getText(), noteArea.getText(), taskCheckBox.isSelected());

                    // Hapus task dari UI
                    taskNotes.remove(taskItemPanel);
                    taskPanel.remove(taskItemPanel);
                    taskPanel.revalidate();
                    taskPanel.repaint();
                }
            });

            taskCheckBox.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    boolean newStatus = taskCheckBox.isSelected();
                    taskField.setForeground(newStatus ? Color.GRAY : Color.BLACK);

                    // Hapus panel lama dan tambahkan di posisi yang benar
                    taskPanel.remove(taskItemPanel);
                    if (newStatus) {
                        taskPanel.add(taskItemPanel); 
                    } else {
                        taskPanel.add(taskItemPanel, 0);
                    }

                    taskPanel.revalidate();
                    taskPanel.repaint();
                }
            });

            if (isCompleted) {
                taskPanel.add(taskItemPanel);
            } else {
                taskPanel.add(taskItemPanel, 0);
            }
        }

        taskPanel.revalidate();
        taskPanel.repaint();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading tasks: " + e.getMessage());
        }
    }

    private void deleteTaskFromDatabase(String task, String note, boolean isCompleted) {
        try (Connection conn = Koneksi.getConnection()) {
        if (conn == null) {
            JOptionPane.showMessageDialog(this, "Failed to connect to database!");
            return;
        }

        String sql = "DELETE FROM tasks WHERE task = ? AND note = ? AND is_completed = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, task);
            pstmt.setString(2, note);
            pstmt.setBoolean(3, isCompleted);
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Task deleted from database.");
            } else {
                JOptionPane.showMessageDialog(this, "Task not found in database.");
            }
        }
        
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting task: " + e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTaskBtn;
    private javax.swing.JButton deleteAllBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton saveBtn;
    private javax.swing.JScrollPane taskScrollPane;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel todolistLabel;
    private javax.swing.JLabel todolistLabel1;
    // End of variables declaration//GEN-END:variables
}
